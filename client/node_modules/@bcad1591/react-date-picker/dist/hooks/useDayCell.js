"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useDayCell = void 0;
var date_fns_1 = require("date-fns");
var context_1 = require("../context");
var dateUnitToDateObj = function (dateUnit) {
    if (!dateUnit) {
        return false;
    }
    var year = dateUnit.year, month = dateUnit.month, day = dateUnit.day;
    if (!day) {
        return false;
    }
    return new Date(year, month - 1, day);
};
var isEqualDate = function (date1, date2) {
    if (!date1 || !date2) {
        return false;
    }
    return (0, date_fns_1.isEqual)(date1, date2);
};
var useDayCell = function (_a) {
    var year = _a.year, month = _a.month, day = _a.day;
    if (!day) {
        return {
            isSelected: false,
            isBetweenPickedDates: false,
            isFirstPickedDate: false,
            isSecondPickedDate: false,
            onClickDayCell: function () { },
        };
    }
    var _b = (0, context_1.useDatePick)(), pickedDateUnits = _b[0], setPickedDateUnits = _b[1];
    var firstPickedDateUnit = pickedDateUnits.firstPickedDateUnit, secondPickedDateUnit = pickedDateUnits.secondPickedDateUnit;
    var firstPickedDate = dateUnitToDateObj(firstPickedDateUnit);
    var secondPickedDate = dateUnitToDateObj(secondPickedDateUnit);
    var currentCellDate = dateUnitToDateObj({ year: year, month: month, day: day });
    var isSelected = isEqualDate(firstPickedDate, currentCellDate) || isEqualDate(secondPickedDate, currentCellDate);
    var isBetweenPickedDates = firstPickedDate <= currentCellDate && currentCellDate <= secondPickedDate;
    var isFirstPickedDate = isEqualDate(currentCellDate, firstPickedDate);
    var isSecondPickedDate = isEqualDate(currentCellDate, secondPickedDate);
    var onClickDayCell = function () {
        var curPickedDateUnit = { year: year, month: month, day: day };
        if (firstPickedDateUnit === null) {
            setPickedDateUnits(__assign(__assign({}, pickedDateUnits), { firstPickedDateUnit: curPickedDateUnit }));
            return;
        }
        if (secondPickedDateUnit === null) {
            if (firstPickedDate > currentCellDate) {
                setPickedDateUnits(function (prevPickedDateUnits) { return ({
                    firstPickedDateUnit: curPickedDateUnit,
                    secondPickedDateUnit: prevPickedDateUnits.firstPickedDateUnit,
                }); });
                return;
            }
            setPickedDateUnits(__assign(__assign({}, pickedDateUnits), { secondPickedDateUnit: curPickedDateUnit }));
            return;
        }
        if (isEqualDate(currentCellDate, secondPickedDate)) {
            setPickedDateUnits(__assign(__assign({}, pickedDateUnits), { secondPickedDateUnit: null }));
            return;
        }
        if (isEqualDate(firstPickedDate, currentCellDate)) {
            setPickedDateUnits(function (prevPickedDateUnits) { return ({
                firstPickedDateUnit: prevPickedDateUnits.secondPickedDateUnit
                    ? pickedDateUnits.secondPickedDateUnit
                    : null,
                secondPickedDateUnit: null,
            }); });
        }
    };
    return {
        isSelected: isSelected,
        isBetweenPickedDates: isBetweenPickedDates,
        isFirstPickedDate: isFirstPickedDate,
        isSecondPickedDate: isSecondPickedDate,
        onClickDayCell: onClickDayCell,
    };
};
exports.useDayCell = useDayCell;
//# sourceMappingURL=useDayCell.js.map