"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useDatePickSetter = exports.useDatePickReset = exports.useDatePickGetter = exports.useDatePick = exports.DatePickerProvider = void 0;
var jsx_runtime_1 = require("react/jsx-runtime");
var react_1 = require("react");
var PickedDateUnitsContext = (0, react_1.createContext)(null);
var PickedDateUnitsDispatchContext = (0, react_1.createContext)(null);
function DatePickerProvider(_a) {
    var children = _a.children;
    var _b = (0, react_1.useState)({
        firstPickedDateUnit: null,
        secondPickedDateUnit: null,
    }), pickedDateUnits = _b[0], setPickedDateUnits = _b[1];
    return ((0, jsx_runtime_1.jsx)(PickedDateUnitsDispatchContext.Provider, __assign({ value: setPickedDateUnits }, { children: (0, jsx_runtime_1.jsx)(PickedDateUnitsContext.Provider, __assign({ value: pickedDateUnits }, { children: children })) })));
}
exports.DatePickerProvider = DatePickerProvider;
var useDatePick = function () {
    var pickedDateUnits = (0, react_1.useContext)(PickedDateUnitsContext);
    var setPickedDateUnits = (0, react_1.useContext)(PickedDateUnitsDispatchContext);
    if (!pickedDateUnits || !setPickedDateUnits) {
        throw new Error('DatePick Error');
    }
    return [pickedDateUnits, setPickedDateUnits];
};
exports.useDatePick = useDatePick;
var unitToDateObj = function (obj) {
    if (!obj || !obj.day) {
        return null;
    }
    var year = obj.year, month = obj.month, day = obj.day;
    return new Date(year, month - 1, day);
};
var useDatePickGetter = function () {
    var pickedDateUnits = (0, react_1.useContext)(PickedDateUnitsContext);
    if (!pickedDateUnits) {
        throw new Error('DatePickGetter Error');
    }
    var firstPickedDateUnit = pickedDateUnits.firstPickedDateUnit, secondPickedDateUnit = pickedDateUnits.secondPickedDateUnit;
    var pickedDates = {
        firstPickedDate: unitToDateObj(firstPickedDateUnit),
        secondPickedDate: unitToDateObj(secondPickedDateUnit),
    };
    return { pickedDateUnits: pickedDateUnits, pickedDates: pickedDates };
};
exports.useDatePickGetter = useDatePickGetter;
var useDatePickReset = function () {
    var setPickedDateUnits = (0, react_1.useContext)(PickedDateUnitsDispatchContext);
    if (!setPickedDateUnits) {
        throw new Error('DatePickSetter Error');
    }
    var reset = function () {
        setPickedDateUnits({
            firstPickedDateUnit: null,
            secondPickedDateUnit: null,
        });
    };
    return reset;
};
exports.useDatePickReset = useDatePickReset;
var useDatePickSetter = function () {
    var setPickedDateUnits = (0, react_1.useContext)(PickedDateUnitsDispatchContext);
    if (!setPickedDateUnits) {
        throw new Error('DatePickSetter Error');
    }
    return setPickedDateUnits;
};
exports.useDatePickSetter = useDatePickSetter;
//# sourceMappingURL=index.js.map